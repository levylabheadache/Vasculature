% Use this script%% delete former and initiate a new databasereset=input('Would you like to reset all the data? ''1'' for yes, ''0'' for no: '); % ask user if he is satisfied with the kymograph.if reset    clear all    databasePath=uigetdir('/Volumes/','Where is the output folder?');    cd(databasePath);    sumOutput={};    sumOutput_max_diameter={};    sumOutput_baseline={};    sumOutput_diameter={};    sumOutput_Delta_D={};    sumOutput_baseline={};    sumOutput_max_diameter={};    ptsPerFile={};    databaseFile='database.mat';    save(databaseFile,'ptsPerFile','sumOutput_baseline', 'sumOutput_max_diameter', 'sumOutput_diameter','sumOutput_Delta_D');    reset=1;endwritemovie=0; % would you like to generate a movie%% this part assign parameters that will be used in the script:groupframe=3;End_BaselineTime=100./groupframe; % theese frames amount to serve as baselineStart_BaselineTime=70./groupframe;%3 secs before stimulation serves as the baselineStart_Whisker_Stimulation_frame=110./groupframe;End_Whisker_Stimulation_frame=600./groupframe;MinPeakHight=5; % minimal intensity of vessel boundryMinPeaksDistance=15; % minimal distance between vessel boundryFramesPerImage=End_Whisker_Stimulation_frame./groupframe; %MAKE SURE TO KNOW HOW MANY IMAGES IN STACKChannelsPerImage=1;%Make sure to know how many channels are in the stackFrame_whisker_max=[];Pixel_size=0.4; %0.4 um at zoom 5firstStackToAnalyze=1; % change to 2 or 3 if the analyzed channel is not the first. This is the rcamp channelscan=5; %this is the number of linescan sampledif reset==01    % get the database file:     [databaseFile,databasePath,FilterIndex] = uigetfile('*.mat','link to database file'); %run if restarting    cd(databasePath); % run these two lines (35+36) to reference the database file    load(databaseFile);endtic%get the image file/s to analyze:cd(PathName);[imageFiles,PathName,FilterIndex] = uigetfile('*.tif;*.tif','link to image file','MultiSelect','on');cd(PathName);% this loop will run on all the images:for f=1:size(imageFiles,2)        % if the input is several images then 'imageFiles' is a cell and should    % be treated accordingly (to avoid error).    if iscell(imageFiles)        currentfile=imageFiles{1,f};    else        currentfile=imageFiles;    end        % the input images may have several channels and only one of them    % should be analyzed, 'firstStackToAnalyze' should be the first stack    % to analyze, 'ChannelsPerImage' allows to skip the unwanted frames and    % the script will run untill the final 'FramesPerImage'    specifyRangeHydrazide=[firstStackToAnalyze:ChannelsPerImage:FramesPerImage]; % this is the currect channel    SAVEasPATH=[PathName currentfile(1:end-4) '_kymograph_hydrazide.tif']; % string name that will serve to save the kymograph    A = imread(currentfile, specifyRangeHydrazide(1));    A=uint16(A);    A=imgaussfilt(A,2);    %%    keep=1; % this is a parameter that serves to keep the 'while' loop untill expectations are matched.    k = 0; %if no points for this file have been edited        %% this part reads the first frame.        if k==0 && logical(input('Would you like to load points? ''1'' for yes, ''0'' for no: '))            [pointsFile,databasePath,FilterIndex] = uigetfile('*.mat','link to point file');            load(pointsFile);        elseif k==0 %was 'else' in original; HZ edit            %             Figure_RG=figure('Position',[1 scrsz(4)/24 scrsz(3)/2 scrsz(4)/2]); %BC            %             imshow(RGB_Image) %BC            for i=1:scan                pts(:,:,i) = readPoints(A, 2); % get the coordinates to make the vector.            end                                %if input('Would you like to save the points? ''1'' for yes, ''0'' for no: ')                    pointsFile='pts.mat';                    save(pointsFile,'pts');                    ptsPerFile{end+1,1}=currentfile(1:end-4);                    ptsPerFile{end,2}=pts;                    %end                        pts=round(pts);% since the coordinates are float I round them to get an integer        end                if k==0            for i=1:scan                x(1,:,i)=pts(1,:,i);                y(1,:,i)=pts(2,:,i);                kymograph_h{:,1,i}=num2cell(improfile(A,x(1,:,i),y(1,:,i)));            end                        for t=2:size(specifyRangeHydrazide,2)                for i=1:scan                    A = imread(currentfile, specifyRangeHydrazide(t));                    A=uint16(A);                    kymograph_h{:,t,i}=num2cell(improfile(A,x(1,:,i),y(1,:,i)));                end            end                 while keep          %% Set up to find Baseline, Max Diameter and Delta D over D            Baseline_cell=[];            result_cell=[];            max_cell=[];            delta_double=[];                        Baseline=[];            Smooth_Delta_D=[];            Max_cell=[];                        %% analyze the kymograph            for i=1:scan                for t=1:size(kymograph_h,2)                                        data= kymograph_h(:,t,i); % WE NEED TO FIND A LOCAL MAXIMA!!                    data=cell2mat([data{:}])';                    [pks,locs] = findpeaks(double(data),'MinPeakHeight',MinPeakHight,'MinPeakDistance',MinPeaksDistance);                                        % Keep only the strongest intensity peaks                    if size(locs,2)>2                        while size(locs,2)>2                            del=pks==min(pks);                            pks(del)=[];                            locs(del)=[];                        end                    elseif size(locs,2)<2 % warn of couldnt find 2 peaks                        %msgbox(['I couldn''t find 2 peaks file name: ' currentfile '  and Frame number: ' num2str(i)])                        %             locs=[0 0];                        locs=Locations(t-1,:);                    end                    %         Peaks(t,:)=pks;                    Locations(t,:)=locs; % log all peaks locations over time                                    end                                %%                delta_double=abs(Locations(:,2)-Locations(:,1));                              %% Analyzing Baseline and Whisker Max                Baseline=mean(delta_double(Start_BaselineTime:End_BaselineTime)); %Analyzing Baseline                Delta_D=(delta_double-Baseline)/Baseline*100;                                Baseline_cell(:,i)=Baseline.*Pixel_size;                Abs_Diameter(:,i)=delta_double*Pixel_size;                Smooth_Delta_D(:,i)=smooth(Delta_D);                Max_cell(:,i)=max(smooth(Delta_D(Start_Whisker_Stimulation_frame:End_Whisker_Stimulation_frame,:),5));                Frame_whisker_max(:,i)=max(find(Smooth_Delta_D(:,i)==max(Smooth_Delta_D(Start_Whisker_Stimulation_frame:End_Whisker_Stimulation_frame,i))));            end                        %%            %log and average all trials of baseline, deltaD over D and max            Baseline_cell(:,scan+1)=mean(Baseline_cell);            Abs_Diameter(:,scan+1)=mean(Abs_Diameter,2);            Smooth_Delta_D(:,scan+1)=mean(Smooth_Delta_D,2);            Max_cell(:,scan+1)=max(smooth(Smooth_Delta_D(Start_Whisker_Stimulation_frame:End_Whisker_Stimulation_frame,scan+1),5));            Frame_whisker_max(:,scan+1)=max(find(Smooth_Delta_D(:,scan+1)==max(Smooth_Delta_D(Start_Whisker_Stimulation_frame:End_Whisker_Stimulation_frame,scan+1))));                                figure1=figure('Position', [50, 400, 2500, 900]);                      for i=1:5                subplot(2,6,i); plot(smooth(Smooth_Delta_D(:,i),5), 'k');                hold on                title({'Baseline:' num2str(round(Baseline_cell(i))) ' Max dilation:' num2str(round(Max_cell(i)))})                axis([0 size(specifyRangeHydrazide,2) -10 50])                NO_start = vline(Start_Whisker_Stimulation_frame,'m','Whisker');                hline = refline(0,0);                hline.Color = 'r';                max_whisker_point= ['\downarrow max = ' num2str(round(Max_cell(:,i)))];                text(Frame_whisker_max(:,i),Max_cell(:,i)+1,max_whisker_point)                subplot(2,6,i+6); imagesc(cell2mat([kymograph_h{:,:,i}])); title(['Line ' num2str(i)])                            end            subplot(2,6,i+1), plot(smooth(Smooth_Delta_D(:,i+1)), 'k');            title({' Average Baseline:' num2str(round(Baseline_cell(i+1))) 'Average Max dilation:' num2str(round(Max_cell(i+1)))})            axis([0 size(specifyRangeHydrazide,2) -10 50])            hold on            hline = refline(0,0);            hline.Color = 'r';            NO_start = vline(Start_Whisker_Stimulation_frame,'m','Whisker');            hline = refline(0,0);            hline.Color = 'r';            max_whisker_point= ['\downarrow max = ' num2str(round(Max_cell(:,scan+1)))];            text(Frame_whisker_max(:,scan+1),Max_cell(:,scan+1)+1,max_whisker_point)                        legend( '1 to 100 frame baseline', '70 to 100 frame')                        %%Prompts the user to correct a kymograph            keep=input('Would you like to correct the line? ''1'' for yes, ''0'' to continue with analysis: '); % ask user if he is satisfied with the kymograph.        %end         %for modifying just one kymograph at a time            k = 0;            if keep ~= 0                k = input('Which line would you like to correct? Type in the line number: ');            end            if k ~= 0                pts(:,:,k) = readPoints(A,2); %readPoints only of edited line                x(1,:,k)=pts(1,:,k);                y(1,:,k)=pts(2,:,k);                %replace the kymograph with new line's data                kymograph_h{:,1,k}=num2cell(improfile(A,x(1,:,k),y(1,:,k)));                                for t=2:size(specifyRangeHydrazide,2)                    A = imread(currentfile, specifyRangeHydrazide(t));                    A=uint16(A);                    kymograph_h{:,t,k}=num2cell(improfile(A,x(1,:,k),y(1,:,k)));                end            end          end          if keep ~= 0            keep=input('Would you like to correct the line? ''1'' for yes, ''0'' to continue with analysis: ');        end            end        cd(databasePath);        saveas(gcf,SAVEasPATH, 'tiff');        cd(PathName);               sumOutput_baseline{1,end+1}=[currentfile(1:end-4) 'real_baseline_diameter'];    sumOutput_baseline(2,end)=num2cell(Baseline_cell(:,scan+1));        sumOutput_max_diameter{1,end+1}=[currentfile(1:end-4) 'real_max_diameter'];    sumOutput_max_diameter(2,end)=num2cell(Max_cell(:,scan+1));        sumOutput_diameter{1,end+1}=[currentfile(1:end-4) '_diameter'];    sumOutput_diameter(2:(size(Smooth_Delta_D,1)+1),end)=num2cell(Abs_Diameter(:,scan+1)*.4); %update the output file        sumOutput_Delta_D{1,end+1}=[currentfile(1:end-4) '_change in diameter'];    sumOutput_Delta_D(2:(size(Smooth_Delta_D,1)+1),end)=num2cell(smooth(Smooth_Delta_D(:,scan+1),5));      cd(databasePath);    save(databaseFile,'ptsPerFile','sumOutput_baseline', 'sumOutput_max_diameter', 'sumOutput_diameter','sumOutput_Delta_D');    cd(PathName);    pause(2);    disp(currentfile);       close all;    Mat_realsumOutput = cell2mat(sumOutput_Delta_D(2:end,1:end));plot(smooth(mean(Mat_realsumOutput,2)),'k')hline = refline(0,0);hline.Color = 'r';NO_start = vline(Start_Whisker_Stimulation_frame,'m','NO DONOR');toc% % %%Average the dataset based on 3 trials average_data=0;if average_data%%% Evaluate everything after the IF statement (HERE)    mat_Baseline = cell2mat(sumOutput_baseline(2:end,1:end))';    mat_Max_Diameter = cell2mat(sumOutput_max_diameter(2:end,1:end)');        for nn = 0:(size(mat_Baseline,2)/3)        average3_Baseline(:,nn+1)= mean(mat_Baseline(:,nn*3+1:(nn+1)*3),2);        average3_Max_Diameter(:,nn+1) = mean(mat_Max_Diameter(:,nn*3+1:(nn+1)*3),2);        average3diameter(:,nn+1) = mean(Mat_realsumOutput(:,nn*3+1:(nn+1)*3),2);    end        Group_Trials=[PathName 'all_Trials'];    cd(databasePath);    saveas(gcf,Group_Trials, 'tiff');    cd(PathName);    %%% (HERE)        %%% (HERE)    average3_Baseline=average3_Baseline';    average3_Max_Diameter=average3_Max_Diameter';    %        scan=[];    counter=[];    figure3=figure('Position', [50, 400, 2500, 900]);    for i=1:3:size(Mat_realsumOutput,2);        counter(i)=i;        subplot(2,7,sum(logical(counter))), plot(smooth(Mat_realsumOutput(:,i))),  title({'Baseline:' num2str(round(average3_Baseline(sum(logical(counter))))) ' Max dilation:' num2str(round(average3_Max_Diameter(sum(logical(counter)))))})        axis([0 size(specifyRangeHydrazide,2) -10 30])        hold on        subplot(2,7,sum(logical(counter))), plot(smooth(Mat_realsumOutput(:,i+1)))        axis([0 size(specifyRangeHydrazide,2) -10 30])        hold on        subplot(2,7,sum(logical(counter))), plot(smooth(Mat_realsumOutput(:,i+2)))        hold on        subplot(2,7,sum(logical(counter))), plot(average3diameter(:,sum(logical(counter))), 'LineWidth', 2, 'Color', 'k')        axis([0 size(specifyRangeHydrazide,2) -10 30])        legend('trial 1', 'trial 2', 'trial 3', 'Average')        hline = refline(0,0);        hline.Color = 'k';                line([100 100], get(gca, 'ylim'));        line([150 150], get(gca, 'ylim'));            end    AllTrials=[PathName 'all_Trials'];    cd(databasePath);    saveas(gcf,AllTrials, 'tiff');    cd(PathName);    %%%(HERE)    end % for i=1:size(mat_realsumOutput,2)%    smooth_mat_realsumOutput(:,i)=smooth(mat_realsumOutput(:,i),500);% end% plot(mean(smooth_mat_realsumOutput,2))% % % % % % % % % % % %%    sumOutput_baseline(:,end)=[];%    sumOutput_max_diameter(:,end)=[];%    sumOutput_diameter(:,end)=[];%    sumOutput(:,end)=[];%    sumOutput_real_baseline(:,end)=[];%    sumOutput_real_max_diameter(:,end)=[];%    sumOutput_result(:,end)=[];%     databasePath=uigetdir('/Volumes/','Where is the output folder?');%   % % %    %        %% make movie:    if writemovie        cd(databasePath);        figure('Position',[100 200 500 750]);        movie(1:size(kymograph_h,2)) = struct('cdata', [],...            'colormap', []);        for frame=1:size(kymograph_h,2)            subplot('Position',[0.1 0.3 0.8 0.15])            imagesc(kymograph_h)            colormap('gray');            set(gca,'XTick',[0:50:size(kymograph_h,2)],...                'YTick',[0:25:100]);            scan([frame frame], [0 size(kymograph_h,1)],'LineWidth',2,'Color',[1 0 0])            %     x1     x2      y1   y2                        subplot('Position',[0.15 0.5 0.7 0.45])            A = imread(currentfile, specifyRange(frame));            imagesc(A);            colormap('gray');            h = scan([pts(1,1) pts(1,2)] ,[pts(2,1) pts(2,2)],...                'LineWidth',1,'Color',[0 1 0],'Marker','o')                                    subplot('Position',[0.1 0.1 0.8 0.15])            plot(smooth(result'))            x=gca;            scan([frame frame], x.YLim,'LineWidth',2,'Color',[1 0 0])            movie(frame) = getframe(gcf);        end                v = VideoWriter([ currentfile(1:end-4) '.avi']);        open(v)        writeVideo(v,movie)        close(v)        %%    end    if ~iscell(imageFiles)        break;    endend